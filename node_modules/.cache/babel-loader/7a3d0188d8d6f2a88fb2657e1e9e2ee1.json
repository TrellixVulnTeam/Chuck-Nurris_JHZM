{"ast":null,"code":"var _jsxFileName = \"/home/nivos/Desktop/NK/chuck-norris/src/Components/RandomJoke/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RandomJoke() {\n  _s();\n\n  const [randomJoke, setRandomJoke] = useState('');\n  const [categories, setCategories] = useState([]);\n  const [name, setName] = useState('');\n  const [category, setCategory] = useState('-');\n\n  const byCategory = e => {\n    e.preventDefault();\n    const q = category !== '-' ? `?category=${category}` : '';\n    fetch(`https://api.chucknorris.io/jokes/random${q}`).then(res => res.json()).then(json => setRandomJoke(() => {\n      if (name !== '') {\n        const regex = /Chuck Norris/i;\n        return json.value.replace(regex, name.toString()).replace(regex, name.toString());\n      }\n\n      return json.value;\n    })).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    fetch(`https://api.chucknorris.io/jokes/categories`).then(res => res.json()).then(json => setCategories(json)).catch(err => console.log(err));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabHeader\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: byCategory,\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"label\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Your name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input\",\n            placeholder: \"Chuck Norris\",\n            id: \"name\",\n            onChange: e => setName(e.target.value),\n            value: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"label\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Categories\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"category\",\n            className: \"input\",\n            onChange: e => setCategory(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"-\",\n              children: \"All categories\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, this), categories === null || categories === void 0 ? void 0 : categories.map((elm, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: elm,\n              children: elm.charAt(0).toUpperCase() + elm.slice(1)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"GO!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), randomJoke ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"./Shape.svg\",\n        id: \"shape-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result\",\n        children: randomJoke\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"./Shape-1.svg\",\n        id: \"shape-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null]\n  }, void 0, true);\n}\n\n_s(RandomJoke, \"nWO7wHMmtsFfROaIrIQDjl9sVO8=\");\n\n_c = RandomJoke;\n\nvar _c;\n\n$RefreshReg$(_c, \"RandomJoke\");","map":{"version":3,"sources":["/home/nivos/Desktop/NK/chuck-norris/src/Components/RandomJoke/index.js"],"names":["React","useEffect","useState","RandomJoke","randomJoke","setRandomJoke","categories","setCategories","name","setName","category","setCategory","byCategory","e","preventDefault","q","fetch","then","res","json","regex","value","replace","toString","catch","err","console","log","target","map","elm","index","charAt","toUpperCase","slice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './index.css'\n\nexport default function RandomJoke() {\n\n  const [randomJoke, setRandomJoke] = useState('');\n  const [categories, setCategories] = useState([]);\n\n  const [name, setName] = useState('');\n  const [category, setCategory] = useState('-');\n\n\n  const byCategory = (e) => {\n    e.preventDefault();\n    const q = category !== '-' ? `?category=${category}` : '';\n    fetch(`https://api.chucknorris.io/jokes/random${q}`)\n      .then(res => res.json())\n      .then(json => setRandomJoke(() => {\n        if (name !== '') {\n          const regex = /Chuck Norris/i;\n          return json.value.replace(regex, name.toString()).replace(regex, name.toString());\n        }\n        return json.value;\n      }))\n      .catch(err => console.log(err))\n  }\n\n  useEffect(() => {\n    fetch(`https://api.chucknorris.io/jokes/categories`)\n      .then(res => res.json())\n      .then(json => setCategories(json))\n      .catch(err => console.log(err))\n  }, [])\n\n  return (\n    <>\n      <div className=\"tabHeader\">\n        <form onSubmit={byCategory} className=\"form\">\n          <div>\n            <span className=\"label\"><b>Your name</b></span>\n            <input type=\"text\" className=\"input\" placeholder=\"Chuck Norris\" id=\"name\" onChange={(e) => setName(e.target.value)} value={name} />\n          </div>\n\n          <div>\n            <span className=\"label\"><b>Categories</b></span>\n            <select id=\"category\" className=\"input\" onChange={e => setCategory(e.target.value)}>\n              <option value=\"-\">All categories</option>\n              {categories?.map((elm, index) => (\n                <option key={index} value={elm}>{elm.charAt(0).toUpperCase() + elm.slice(1)}</option>\n              )\n              )}\n            </select>\n          </div>\n          <div>\n            <button>GO!</button>\n          </div>\n        </form>\n      </div>\n      {randomJoke ? (\n        <>\n          <img src=\"./Shape.svg\" id=\"shape-1\" />\n          <div className=\"result\">\n            {randomJoke}\n          </div>\n          <img src=\"./Shape-1.svg\" id=\"shape-2\" />\n        </>\n      ) : null}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}