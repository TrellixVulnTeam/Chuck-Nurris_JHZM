{"ast":null,"code":"var _jsxFileName = \"/home/nivos/Desktop/NK/chuck-norris/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport Header from './Components/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [jokes, setJokes] = useState([]);\n  const [query, setQuery] = useState('');\n  const [name, setName] = useState('');\n  const [category, setCategory] = useState('-');\n  const [randomJoke, setRandomJoke] = useState('');\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch(`https://api.chucknorris.io/jokes/categories`).then(res => res.json()).then(json => setCategories(json)).catch(err => console.log(err));\n  }, []);\n\n  const search = e => {\n    e.preventDefault();\n    fetch(`https://api.chucknorris.io/jokes/search?query=${query}`).then(res => res.json()).then(json => setJokes(json.result)).catch(err => console.log(err));\n    setQuery('');\n  };\n\n  const byCategory = e => {\n    e.preventDefault();\n    const q = category !== '-' ? `?category=${category}` : '';\n    fetch(`https://api.chucknorris.io/jokes/random${q}`).then(res => res.json()).then(json => setRandomJoke(() => {\n      if (name !== '') {\n        const regex = /Chuck Norris/i;\n        return json.value.replace(regex, name.toString());\n      }\n\n      return json.value;\n    })).catch(err => console.log(err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"4VJJo9T7K1PWSHWxqHzDE5NuRJQ=\");\n\n_c = App;\nexport default App;\n{\n  /* <Tabs>\n           <TabList>\n             <Tab>Random</Tab>\n             <Tab>Search</Tab>\n           </TabList>\n            <TabPanel>\n             <form onSubmit={byCategory}>\n               <lable for=\"name\">Your name</lable>\n               <input type=\"text\" id=\"name\" onChange={(e) => setName(e.target.value)} value={name} />\n               <label for=\"category\">Categories</label>\n               <select id=\"category\" onChange={e => setCategory(e.target.value)}>\n                 <option value=\"-\">All categories</option>\n                 {categories?.map((elm, index) => (\n                   <option key={index} value={elm}>{elm.charAt(0).toUpperCase() + elm.slice(1)}</option>\n                 )\n                 )}\n               </select>\n               <button>GO</button>\n             </form>\n             <br />\n             <>\n               {randomJoke}\n             </>\n           </TabPanel>\n           <TabPanel>\n             <form onSubmit={search}>\n               <label for=\"query\">Key word(s)</label>\n               <input id=\"query\" type=\"text\" onChange={(e) => setQuery(e.target.value)} value={query} />\n                <button>GO</button>\n             </form>\n              <>\n               {jokes?.map((elm, index) =>\n                 <li key={index}>{elm.value}</li>\n               )}\n             </>\n           </TabPanel>\n         </Tabs> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/nivos/Desktop/NK/chuck-norris/src/App.js"],"names":["React","useEffect","useState","Tab","Tabs","TabList","TabPanel","Header","App","jokes","setJokes","query","setQuery","name","setName","category","setCategory","randomJoke","setRandomJoke","categories","setCategories","fetch","then","res","json","catch","err","console","log","search","e","preventDefault","result","byCategory","q","regex","value","replace","toString"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport Header from './Components/Header'\n\nconst App = () => {\n\n  const [jokes, setJokes] = useState([]);\n  const [query, setQuery] = useState('');\n  const [name, setName] = useState('');\n  const [category, setCategory] = useState('-');\n  const [randomJoke, setRandomJoke] = useState('');\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    fetch(`https://api.chucknorris.io/jokes/categories`)\n      .then(res => res.json())\n      .then(json => setCategories(json))\n      .catch(err => console.log(err))\n  }, [])\n\n  const search = (e) => {\n    e.preventDefault();\n    fetch(`https://api.chucknorris.io/jokes/search?query=${query}`)\n      .then(res => res.json())\n      .then(json => setJokes(json.result))\n      .catch(err => console.log(err))\n    setQuery('');\n  }\n\n  const byCategory = (e) => {\n    e.preventDefault();\n    const q = category !== '-' ? `?category=${category}` : '';\n    fetch(`https://api.chucknorris.io/jokes/random${q}`)\n      .then(res => res.json())\n      .then(json => setRandomJoke(() => {\n        if (name !== '') {\n          const regex = /Chuck Norris/i;\n          return json.value.replace(regex, name.toString());\n        }\n        return json.value;\n      }))\n      .catch(err => console.log(err))\n  }\n\n\n  return (\n    <>\n      <Header />\n      <main>\n\n\n\n      </main>\n    </>\n  )\n}\n\nexport default App;\n\n\n{/* <Tabs>\n          <TabList>\n            <Tab>Random</Tab>\n            <Tab>Search</Tab>\n          </TabList>\n\n          <TabPanel>\n            <form onSubmit={byCategory}>\n              <lable for=\"name\">Your name</lable>\n              <input type=\"text\" id=\"name\" onChange={(e) => setName(e.target.value)} value={name} />\n              <label for=\"category\">Categories</label>\n              <select id=\"category\" onChange={e => setCategory(e.target.value)}>\n                <option value=\"-\">All categories</option>\n                {categories?.map((elm, index) => (\n                  <option key={index} value={elm}>{elm.charAt(0).toUpperCase() + elm.slice(1)}</option>\n                )\n                )}\n              </select>\n              <button>GO</button>\n            </form>\n            <br />\n            <>\n              {randomJoke}\n            </>\n          </TabPanel>\n          <TabPanel>\n            <form onSubmit={search}>\n              <label for=\"query\">Key word(s)</label>\n              <input id=\"query\" type=\"text\" onChange={(e) => setQuery(e.target.value)} value={query} />\n\n              <button>GO</button>\n            </form>\n\n            <>\n              {jokes?.map((elm, index) =>\n                <li key={index}>{elm.value}</li>\n              )}\n            </>\n          </TabPanel>\n        </Tabs> */}"]},"metadata":{},"sourceType":"module"}